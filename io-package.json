{
    "common": {
        "name": "tesla-motors",
        "version": "0.5.4",
        "news": {
            "0.5.3": {
                "en": "Improved smart wakeup plan and wakeup more reliable on action request",
                "de": "Verbesserter intelligenter Aufwachplan und zuverlässigeres Aufwachen auf Aktionsanforderung",
                "ru": "Улучшенный план интеллектуального пробуждения и более надежное пробуждение по запросу",
                "pt": "Plano de despertar inteligente aprimorado e despertar mais confiável mediante solicitação de ação",
                "nl": "Verbeterd slim ontwaakplan en ontwaken betrouwbaarder op actieverzoek",
                "fr": "Plan de réveil intelligent amélioré et réveil plus fiable sur demande d'action",
                "it": "Piano di risveglio intelligente migliorato e risveglio più affidabile su richiesta di azione",
                "es": "Plan de activación inteligente mejorado y activación más confiable cuando se solicita una acción",
                "pl": "Ulepszony plan inteligentnego wybudzania i bardziej niezawodne wybudzanie na żądanie działania",
                "zh-cn": "改进的智能唤醒计划和唤醒更可靠的动作请求"
            },
            "0.5.0": {
                "en": "Store passwords and other sensitive information encrypted (breaking change - set your credentials again)",
                "de": "Passwörter und andere vertrauliche Informationen werden verschlüsselt (breaking change - setzen Sie Ihre Anmeldeinformationen erneut)",
                "ru": "Храните пароли и другую конфиденциальную информацию в зашифрованном виде (критическое изменение - снова установите учетные данные)",
                "pt": "Armazene senhas e outras informações confidenciais criptografadas (alteração decisiva - defina suas credenciais novamente)",
                "nl": "Bewaar wachtwoorden en andere gevoelige informatie versleuteld (wijziging verbreken - stel uw inloggegevens opnieuw in)",
                "fr": "Stockez les mots de passe et autres informations sensibles chiffrés (changement de rupture - définissez à nouveau vos informations d'identification)",
                "it": "Memorizza password e altre informazioni sensibili crittografate (modifica decisiva: imposta di nuovo le tue credenziali)",
                "es": "Almacene las contraseñas y otra información confidencial cifrada (cambio importante: configure sus credenciales nuevamente)",
                "pl": "Przechowuj hasła i inne poufne informacje w postaci zaszyfrowanej (ważna zmiana - ponownie ustaw swoje dane uwierzytelniające)",
                "zh-cn": "以加密方式存储密码和其他敏感信息（重大更改-再次设置您的凭据）"
            },
            "0.4.2": {
                "en": "Define instanceObject \"info.connection\" to prevent warning with js-controller 3.2.",
                "de": "instanceObject \"info.connection\" definiert, um eine Warnung mit js-controller 3.2 zu vermeiden.",
                "ru": "Определите instanceObject \"info.connection\", чтобы предотвратить предупреждение с помощью js-controller 3.2.",
                "pt": "Defina instanceObject \"info.connection\" para evitar avisos com js-controller 3.2.",
                "nl": "Definieer instanceObject \"info.connection\" om waarschuwing met js-controller 3.2 te voorkomen.",
                "fr": "Définissez instanceObject \"info.connection\" pour éviter les avertissements avec js-controller 3.2.",
                "it": "Definire instanceObject \"info.connection\" per evitare avvisi con js-controller 3.2.",
                "es": "Defina instanceObject \"info.connection\" para evitar advertencias con js-controller 3.2.",
                "pl": "Zdefiniuj obiekt instanceObject „info.connection”, aby zapobiec ostrzeżeniu za pomocą kontrolera js 3.2.",
                "zh-cn": "定义instanceObject“ info.connection”以防止使用js-controller 3.2发出警告。"
            },
            "0.4.1": {
                "en": "Add \"Stopped\" as charge state where car can go asleep",
                "de": "\"Gestoppt\" als Ladezustand hinzugefügt, in dem das Auto einschlafen kann",
                "ru": "Добавьте \"Остановлен\" в качестве состояния зарядки, при котором автомобиль может заснуть.",
                "pt": "Adicione 'Parado' como estado de carga onde o carro pode adormecer",
                "nl": "Voeg 'Gestopt' toe als laadstatus waar de auto in slaap kan vallen",
                "fr": "Ajouter `` Arrêté '' comme état de charge où la voiture peut s'endormir",
                "it": "Aggiungi \"Fermata\" come stato di carica in cui l'auto può addormentarsi",
                "es": "Agregue 'Detenido' como estado de carga donde el automóvil puede quedarse dormido",
                "pl": "Dodaj „Zatrzymany” jako stan naładowania, w którym samochód może zasnąć",
                "zh-cn": "添加“已停止”作为充电状态，汽车可以进入睡眠状态"
            },
            "0.4.0": {
                "en": "Implement 2FA Authentification, use new authentification flow",
                "de": "Implementiere 2FA Authentifizierung, nutze neue Authentifizierungsart",
                "ru": "Внедрить аутентификацию 2FA, использовать новый поток аутентификации",
                "pt": "Implementar autenticação 2FA, usar novo fluxo de autenticação",
                "nl": "Implementeer 2FA-authenticatie, gebruik nieuwe authenticatiestroom",
                "fr": "Mettre en œuvre l'authentification 2FA, utiliser un nouveau flux d'authentification",
                "it": "Implementare l'autenticazione 2FA, utilizzare il nuovo flusso di autenticazione",
                "es": "Implementar la autenticación 2FA, usar un nuevo flujo de autenticación",
                "pl": "Zaimplementuj uwierzytelnianie 2FA, użyj nowego przepływu uwierzytelniania",
                "zh-cn": "实施2FA身份验证，使用新的身份验证流程"
            },
            "0.3.2": {
                "en": "Bugfix logging leading to a crash in case of failed Authentication",
                "de": "Bugfix Logging, das bei fehlgeschlagener Authentifizierung zu einem Absturz führte",
                "ru": "Запись логов с ошибками, приводившая к краху в случае неудачной аутентификации",
                "pt": "Registo de erros que leva a um acidente em caso de falha da Autenticação",
                "nl": "Bugfix logging leidt tot een crash in geval van mislukte Authenticatie",
                "fr": "Correction d'un bogue entraînant un plantage en cas d'échec de l'authentification",
                "it": "Bugfix logging che porta ad un crash in caso di autenticazione fallita",
                "es": "Se ha corregido un error en el registro que provocaba un bloqueo en caso de que fallara la autenticación",
                "pl": "Usunięcie błędu powodującego awarię logowania w przypadku nieudanego uwierzytelnienia",
                "zh-cn": "修正在验证失败时导致崩溃的日志记录。"
            },
            "0.3.1": {
                "en": "Check token refresh more often",
                "de": "Häufigere Überprüfung der Token-Aktualisierung",
                "ru": "Чаще проверяйте обновление токена",
                "pt": "Verifique a atualização do token com mais frequência",
                "nl": "Controleer de tokenvernieuwing vaker",
                "fr": "Vérifier l'actualisation du jeton plus souvent",
                "it": "Controlla l'aggiornamento del token più spesso",
                "es": "Verifique la actualización del token con más frecuencia",
                "pl": "Sprawdzaj częściej odświeżanie tokena",
                "zh-cn": "检查令牌刷新的频率更高"
            },
            "0.3.0": {
                "en": "Removed tests for node 8; updated dependencies",
                "de": "Unterstützung Tests auf node 8 entfernt; Abhängigkeiten aktualisiert"
            },
            "0.2.3": {
                "en": "Refresh info every 5 seconds when car is moving",
                "de": "Aktualisierungsrate von 5 Sekunden wenn sich das Auto bewegt"
            },
            "0.2.2": {
                "en": "Use decrypt from ioBrokerTools, fix issue with selecting car",
                "de": "Decrypt von ioBrokerTools, Fehler mit Wagenauswahl korrigiert"
            },
            "0.2.1": {
                "en": "Fix bug with odomoter, refactor object creation, fix issues with compact mode",
                "de": "Fehler mit Odometer korrigiert, Objecterstellung angepasst, compact mode repariert"
            },
            "0.2.0": {
                "en": "Included testing, encrypt password",
                "de": "Testing hinzugefügt, passwort verschlüsselt speichern"
            },
            "0.1.2": {
                "en": "Add Roles, refactor states",
                "de": "Rollen hinzugefügt und States überarbeitet"
            },
            "0.1.1": {
                "en": "Fix Wakeup plan",
                "de": "Fix für Aufwachstrategie"
            },
            "0.1.0": {
                "en": "Translations, readme and small fixes",
                "de": "Übersetzungen, Readme und kleine Behebungen"
            },
            "0.0.3": {
                "en": "Implement additional wakeup-Strategies",
                "de": "Implementiere erweiterte Aufwachstrategien"
            },
            "0.0.2": {
                "en": "Read and control all states",
                "de": "Lesen und ändern aller Zustände"
            },
            "0.0.1": {
                "en": "initial release",
                "de": "Erstveröffentlichung"
            }
        },
        "title": "Tesla Motors",
        "titleLang": {
            "en": "Tesla Motors",
            "de": "Tesla Motors",
            "ru": "Тесла Моторс",
            "pt": "Tesla Motors",
            "nl": "Tesla Motors",
            "fr": "Moteurs Tesla",
            "it": "Tesla Motors",
            "es": "Tesla Motors",
            "pl": "Tesla Motors",
            "zh-cn": "特斯拉汽车"
        },
        "desc": {
            "en": "Adapter for Tesla Motors cars",
            "de": "Adapter für Tesla Motors Autos",
            "ru": "Адаптер для автомобилей Tesla Motors",
            "pt": "Adaptador para carros Tesla Motors",
            "nl": "Adapter voor Tesla Motors-auto's",
            "fr": "Adaptateur pour voitures Tesla Motors",
            "it": "Adattatore per auto Tesla Motors",
            "es": "Adaptador para automóviles Tesla Motors",
            "pl": "Adapter do samochodów Tesla Motors",
            "zh-cn": "特斯拉汽车的适配器"
        },
        "authors": [
            "Dominic Blattmann <nick@dbweb.ch>"
        ],
        "keywords": [
            "ioBroker",
            "tesla",
            "teslamotors",
            "Smart Home",
            "home automation"
        ],
        "license": "MIT",
        "platform": "Javascript/Node.js",
        "main": "main.js",
        "icon": "tesla-motors.png",
        "enabled": true,
        "extIcon": "https://raw.githubusercontent.com/dbweb-ch/ioBroker.tesla-motors/master/admin/tesla-motors.png",
        "readme": "https://github.com/dbweb-ch/ioBroker.tesla-motors/blob/master/README.md",
        "loglevel": "info",
        "messagebox": true,
        "subscribe": "messagebox",
        "restartAdapters": [
            "tesla-motors"
        ],
        "mode": "daemon",
        "type": "vehicle",
        "compact": true,
        "connectionType": "cloud",
        "dataSource": "poll",
        "materialize": true,
        "materializeTab": false,
        "supportCustoms": false,
        "dependencies": [
            {
                "js-controller": ">=2.0.0"
            }
        ]
    },
    "protectedNative": [
        "teslaUsername",
        "teslaPassword",
        "authToken",
        "refreshToken"
    ],
    "encryptedNative": [
        "teslaPassword",
        "authToken",
        "refreshToken"
    ],
    "native": {
        "teslaUsername": "",
        "teslaPassword": "",
        "authToken": "",
        "refreshToken": "",
        "tokenExpire": 0,
        "wakeupPlan": "smart",
        "vehicles": [],
        "vehicle_id_s": ""
    },
    "objects": [],
    "instanceObjects": [
        {
            "_id": "info.connection",
            "type": "state",
            "common": {
                "name": "Device or service connected",
                "type": "boolean",
                "read": true,
                "write": false,
                "role": "indicator.connected",
                "def": false
            },
            "native": {}
        },
        {
            "_id": "command",
            "type": "channel",
            "common": {
                "name": "Commands to control the car"
            },
            "native": {}
        },
        {
            "_id": "vehicle",
            "type": "channel",
            "common": {
                "name": "Information about your car"
            },
            "native": {}
        },
        {
            "_id": "chargeState",
            "type": "channel",
            "common": {
                "name": "Information about car charge states"
            },
            "native": {}
        },
        {
            "_id": "climateState",
            "type": "channel",
            "common": {
                "name": "Information about car climate"
            },
            "native": {}
        },
        {
            "_id": "driveState",
            "type": "channel",
            "common": {
                "name": "Information about the drive state"
            },
            "native": {}
        },
        {
            "_id": "softwareUpdate",
            "type": "channel",
            "common": {
                "name": "Info on pending software updates"
            },
            "native": {}
        },
        {
            "_id": "command.standby",
            "type": "state",
            "common": {
                "name": "Car in Standby?",
                "type": "boolean",
                "role": "info.standby",
                "write": true
            },
            "native": {}
        },
        {
            "_id": "vehicle.id_s",
            "type": "state",
            "common": {
                "name": "API Identifier of the car",
                "type": "string",
                "role": "info.address"
            },
            "native": {}
        },
        {
            "_id": "vehicle.vin",
            "type": "state",
            "common": {
                "name": "VIN",
                "type": "string",
                "role": "info.address"
            },
            "native": {}
        },
        {
            "_id": "vehicle.display_name",
            "type": "state",
            "common": {
                "name": "Your car name",
                "type": "string",
                "role": "info.name"
            },
            "native": {}
        },
        {
            "_id": "vehicle.option_codes",
            "type": "state",
            "common": {
                "name": "List of option codes of your car",
                "desc": "Check them on https://tesla-api.timdorr.com/vehicle/optioncodes",
                "type": "string",
                "role": "text"
            },
            "native": {}
        },
        {
            "_id": "vehicle.color",
            "type": "state",
            "common": {
                "name": "Color of your car",
                "type": "string",
                "role": "text"
            },
            "native": {}
        },
        {
            "_id": "vehicle.odometer",
            "type": "state",
            "common": {
                "name": "Odometer",
                "type": "number",
                "role": "state"
            },
            "native": {}
        },
        {
            "_id": "vehicle.homelink_device_count",
            "type": "state",
            "common": {
                "name": "Homelink Device count",
                "type": "number",
                "role": "state"
            },
            "native": {}
        },
        {
            "_id": "vehicle.homelink_nearby",
            "type": "state",
            "common": {
                "name": "Homelink nearby",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "command.doorLock",
            "type": "state",
            "common": {
                "name": "Door Lock",
                "desc": "true - open,false - close",
                "type": "boolean",
                "role": "switch.lock.door",
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.homelink",
            "type": "state",
            "common": {
                "name": "Trigger home link",
                "desc": "Can only be triggered when car is in region of device (check vehicle.homelink_nearby)",
                "type": "boolean",
                "role": "button",
                "def": false,
                "read": false,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.honkHorn",
            "type": "state",
            "common": {
                "name": "Honk Horn",
                "type": "boolean",
                "role": "button",
                "def": false,
                "read": false,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.flashLights",
            "type": "state",
            "common": {
                "name": "Flash Lights",
                "type": "boolean",
                "role": "button",
                "def": false,
                "read": false,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.Climate",
            "type": "state",
            "common": {
                "name": "Climate",
                "desc": "Turn on climate to pre-set temperature",
                "type": "boolean",
                "role": "switch.power",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.SetChargeLimit",
            "type": "state",
            "common": {
                "name": "Set Charge Limit",
                "type": "number",
                "role": "level",
                "unit": "%",
                "read": true,
                "write": true,
                "min": 50,
                "max": 100
            },
            "native": {}
        },
        {
            "_id": "command.ChargePort",
            "type": "state",
            "common": {
                "name": "Open / Close charge Port",
                "type": "boolean",
                "role": "switch.lock",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.UnlockChargePort",
            "type": "state",
            "common": {
                "name": "Unlock charge Port",
                "type": "boolean",
                "role": "switch.lock",
                "read": false,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.Charging",
            "type": "state",
            "common": {
                "name": "Charging state",
                "type": "boolean",
                "role": "switch.enable",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.ValetMode",
            "type": "state",
            "common": {
                "name": "Enable valet Mode",
                "type": "boolean",
                "role": "switch.enable",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.ValetPin",
            "type": "state",
            "common": {
                "name": "Pin for Valet Mode",
                "type": "string",
                "def": "????",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.SpeedLimit",
            "type": "state",
            "common": {
                "name": "Limit max. car Speed",
                "desc": "Set Limit with 'SpeedLimitValue'",
                "type": "boolean",
                "role": "switch.enable",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.SentryMode",
            "type": "state",
            "common": {
                "name": "Enable Sentry Mode",
                "type": "boolean",
                "role": "switch.enable",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.RemoteStart",
            "type": "state",
            "common": {
                "name": "Enable Remote Start",
                "type": "boolean",
                "role": "switch.enable",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.StartSoftwareUpdate",
            "type": "state",
            "common": {
                "name": "Start Software Update",
                "desc": "Software need to be available (Download 100%)",
                "type": "boolean",
                "role": "button.start",
                "read": false,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.seat_heater_left",
            "type": "state",
            "common": {
                "name": "Left seat heater",
                "desc": "Level of Seat heater (0 = off,3 = max)",
                "type": "number",
                "role": "level",
                "states": {
                    "0": "OFF",
                    "1": "1",
                    "2": "2",
                    "3": "MAX"
                },
                "read": true,
                "write": true,
                "min": 0,
                "max": 3
            },
            "native": {}
        },
        {
            "_id": "command.seat_heater_right",
            "type": "state",
            "common": {
                "name": "Right seat heater",
                "desc": "Level of Seat heater (0 = off,3 = max)",
                "type": "number",
                "role": "level",
                "states": {
                    "0": "OFF",
                    "1": "1",
                    "2": "2",
                    "3": "MAX"
                },
                "read": true,
                "write": true,
                "min": 0,
                "max": 3
            },
            "native": {}
        },
        {
            "_id": "command.seat_heater_rear_center",
            "type": "state",
            "common": {
                "name": "Rear center seat heater",
                "desc": "Level of Seat heater (0 = off,3 = max)",
                "type": "number",
                "role": "level",
                "states": {
                    "0": "OFF",
                    "1": "1",
                    "2": "2",
                    "3": "MAX"
                },
                "read": true,
                "write": true,
                "min": 0,
                "max": 3
            },
            "native": {}
        },
        {
            "_id": "command.seat_heater_rear_left",
            "type": "state",
            "common": {
                "name": "Rear left seat heater",
                "desc": "Level of Seat heater (0 = off,3 = max)",
                "type": "number",
                "role": "level",
                "states": {
                    "0": "OFF",
                    "1": "1",
                    "2": "2",
                    "3": "MAX"
                },
                "read": true,
                "write": true,
                "min": 0,
                "max": 3
            },
            "native": {}
        },
        {
            "_id": "command.seat_heater_rear_right",
            "type": "state",
            "common": {
                "name": "Rear right seat heater",
                "desc": "Level of Seat heater (0 = off,3 = max)",
                "type": "number",
                "role": "level",
                "states": {
                    "0": "OFF",
                    "1": "1",
                    "2": "2",
                    "3": "MAX"
                },
                "read": true,
                "write": true,
                "min": 0,
                "max": 3
            },
            "native": {}
        },
        {
            "_id": "command.steering_wheel_heater",
            "type": "state",
            "common": {
                "name": "Steering wheel heater",
                "type": "boolean",
                "role": "switch.enable",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.windowVent",
            "type": "state",
            "common": {
                "name": "Vent Window",
                "desc": "Hint: Can also be used to close all windows",
                "type": "boolean",
                "role": "button.open.window",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.SunRoofVent",
            "type": "state",
            "common": {
                "name": "Vent Sunroof",
                "desc": "Sets sunroof to vent position",
                "type": "boolean",
                "role": "button.open.window",
                "read": true,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.openTrunk",
            "type": "state",
            "common": {
                "name": "Open trunk",
                "type": "boolean",
                "role": "button.open.door",
                "read": false,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.openFrunk",
            "type": "state",
            "common": {
                "name": "Open frunk (front trunk)",
                "type": "boolean",
                "role": "button.open.door",
                "read": false,
                "write": true
            },
            "native": {}
        },
        {
            "_id": "command.SetTemperature",
            "type": "state",
            "common": {
                "name": "Set Temperature",
                "desc": "Sets temperature of driver and passenger",
                "type": "number",
                "role": "value.temperature",
                "read": true,
                "unit": "°C",
                "write": true
            },
            "native": {}
        },
        {
            "_id": "chargeState.charging_state",
            "type": "state",
            "common": {
                "name": "Charging State",
                "type": "string",
                "role": "state",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.battery_level",
            "type": "state",
            "common": {
                "name": "Battery level",
                "type": "number",
                "role": "value.battery",
                "unit": "%",
                "read": true,
                "write": false,
                "min": 0,
                "max": 100
            },
            "native": {}
        },
        {
            "_id": "chargeState.scheduled_charging_start_time",
            "type": "state",
            "common": {
                "name": "Scheduled charge start Time",
                "desc": "Current Format: yyyy-MM-ddTHH:mm:ss (But can be changed by Tesla anytime)",
                "type": "string",
                "read": true,
                "write": false,
                "role": "date.start"
            },
            "native": {}
        },
        {
            "_id": "chargeState.battery_heater_on",
            "type": "state",
            "common": {
                "name": "Battery heater State",
                "type": "boolean",
                "read": true,
                "write": false,
                "role": "indicator"
            },
            "native": {}
        },
        {
            "_id": "chargeState.minutes_to_full_charge",
            "type": "state",
            "common": {
                "name": "Minutes to fully Charge",
                "type": "number",
                "role": "value",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.fast_charger_present",
            "type": "state",
            "common": {
                "name": "Fast Charger connected",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.usable_battery_level",
            "type": "state",
            "common": {
                "name": "Usable battery level",
                "type": "number",
                "role": "value.battery",
                "unit": "%",
                "read": true,
                "write": false,
                "min": 0,
                "max": 100
            },
            "native": {}
        },
        {
            "_id": "chargeState.charge_energy_added",
            "type": "state",
            "common": {
                "name": "Energy added with last charge",
                "type": "number",
                "role": "value",
                "unit": "kWh",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.charger_voltage",
            "type": "state",
            "common": {
                "name": "Charger voltage",
                "type": "number",
                "role": "value.voltage",
                "unit": "V",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.charger_power",
            "type": "state",
            "common": {
                "name": "Charger power",
                "type": "number",
                "role": "value",
                "unit": "kW",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.charge_current_request",
            "type": "state",
            "common": {
                "name": "Charge current requested",
                "type": "number",
                "role": "value.current",
                "unit": "A",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.charge_port_cold_weather_mode",
            "type": "state",
            "common": {
                "name": "Charge port cold weather mode",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.battery_range",
            "type": "state",
            "common": {
                "name": "Battery Range",
                "type": "number",
                "role": "state",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.est_battery_range",
            "type": "state",
            "common": {
                "name": "Estimated Battery Range",
                "type": "number",
                "role": "state",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.ideal_battery_range",
            "type": "state",
            "common": {
                "name": "Ideal Battery Range",
                "type": "number",
                "role": "state",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "chargeState.charge_distance_added_rated",
            "type": "state",
            "common": {
                "name": "Distance added with charge",
                "type": "number",
                "role": "state",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.inside_temp",
            "type": "state",
            "common": {
                "name": "Inside Temperature",
                "type": "number",
                "role": "value.temperature",
                "unit": "°C",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.outside_temp",
            "type": "state",
            "common": {
                "name": "Outside Temperature",
                "type": "number",
                "role": "value.temperature",
                "unit": "°C",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.max_avail_temp",
            "type": "state",
            "common": {
                "name": "Max. available inside Temperature",
                "type": "number",
                "role": "value.temperature",
                "unit": "°C",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.min_avail_temp",
            "type": "state",
            "common": {
                "name": "Min. available inside Temperature",
                "type": "number",
                "role": "value.temperature",
                "unit": "°C",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.sun_roof_installed",
            "type": "state",
            "common": {
                "name": "Sun Roof Installed",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.sun_roof_percent_open",
            "type": "state",
            "common": {
                "name": "Percentage the sunroof is open",
                "type": "number",
                "role": "level",
                "unit": "%",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.front_driver_window",
            "type": "state",
            "common": {
                "name": "Front driver window state",
                "type": "boolean",
                "role": "sensor.window",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.front_passenger_window",
            "type": "state",
            "common": {
                "name": "Front passenger window state",
                "type": "boolean",
                "role": "sensor.window",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.rear_driver_window",
            "type": "state",
            "common": {
                "name": "Rear driver window state",
                "type": "boolean",
                "role": "sensor.window",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.rear_passenger_window",
            "type": "state",
            "common": {
                "name": "Front passenger window state",
                "type": "boolean",
                "role": "sensor.window",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.wiper_blade_heater",
            "type": "state",
            "common": {
                "name": "Wiper blade heater",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.side_mirror_heaters",
            "type": "state",
            "common": {
                "name": "Side mirrors heaters",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.is_preconditioning",
            "type": "state",
            "common": {
                "name": "Is preconditioning",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.smart_preconditioning",
            "type": "state",
            "common": {
                "name": "Smart preconditioning",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.is_auto_conditioning_on",
            "type": "state",
            "common": {
                "name": "Auto conditioning",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "climateState.battery_heater",
            "type": "state",
            "common": {
                "name": "Battery heater",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.shift_state",
            "type": "state",
            "common": {
                "name": "Shift State",
                "type": "string",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.power",
            "type": "state",
            "common": {
                "name": "Power",
                "type": "number",
                "role": "value.power.consumption",
                "unit": "kW",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.latitude",
            "type": "state",
            "common": {
                "name": "Current position latitude",
                "type": "number",
                "role": "value.gps.latitude",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.longitude",
            "type": "state",
            "common": {
                "name": "Current position longitude",
                "type": "number",
                "role": "value.gps.longitude",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.heading",
            "type": "state",
            "common": {
                "name": "Car heading",
                "type": "number",
                "role": "value.direction",
                "unit": "°deg",
                "read": true,
                "write": false,
                "min": 0,
                "max": 360
            },
            "native": {}
        },
        {
            "_id": "driveState.gps_as_of",
            "type": "state",
            "common": {
                "name": "Timestamp of last gps position",
                "type": "number",
                "role": "value.time",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.SpeedLimitMax",
            "type": "state",
            "common": {
                "name": "Speed limit max. settable",
                "type": "number",
                "role": "state",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.SpeedLimitMin",
            "type": "state",
            "common": {
                "name": "Speed limit min. settable",
                "type": "number",
                "role": "state",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "driveState.speed",
            "type": "state",
            "common": {
                "name": "Current speed",
                "type": "number",
                "role": "value",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "vehicle.is_user_present",
            "type": "state",
            "common": {
                "name": "Is user present",
                "type": "boolean",
                "role": "indicator",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "vehicle.car_type",
            "type": "state",
            "common": {
                "name": "Car Type",
                "type": "string",
                "role": "text",
                "read": true,
                "write": false
            },
            "native": {}
        },
        {
            "_id": "softwareUpdate.download_percentage",
            "type": "state",
            "common": {
                "name": "Software downloaded in %",
                "type": "number",
                "role": "level",
                "unit": "%",
                "read": true,
                "write": false,
                "min": 0,
                "max": 100
            },
            "native": {}
        },
        {
            "_id": "softwareUpdate.expected_duration_sec",
            "type": "state",
            "common": {
                "name": "Update expected duration",
                "type": "number",
                "role": "value",
                "read": true,
                "write": false,
                "unit": "sec"
            },
            "native": {}
        },
        {
            "_id": "softwareUpdate.install_percentage",
            "type": "state",
            "common": {
                "name": "Installation in %",
                "type": "number",
                "role": "level",
                "unit": "%",
                "read": true,
                "write": false,
                "min": 0,
                "max": 100
            },
            "native": {}
        },
        {
            "_id": "softwareUpdate.status",
            "type": "state",
            "common": {
                "name": "Update Status",
                "type": "string",
                "read": true,
                "write": false,
                "role": "state"
            },
            "native": {}
        },
        {
            "_id": "softwareUpdate.version",
            "type": "state",
            "common": {
                "name": "Update Version",
                "type": "string",
                "role": "text",
                "read": true,
                "write": false
            },
            "native": {}
        }
    ]
}
